import ipaddress

def vlsm(subnets, network_address):
    # Sort subnets by size in descending order
    subnets = sorted(subnets, reverse=True)

    # Calculate the total number of addresses needed
    total = sum(subnets)

    # Check if the total is a power of two
    if (total & (total - 1)) != 0:
        raise ValueError("Total number of addresses must be a power of two")

    # Calculate the number of bits needed for the network mask
    mask_bits = total.bit_length()

    # Calculate the subnet mask and network address
    subnet_mask = (0xffffffff >> (32 - mask_bits)) << (32 - mask_bits)

    # Initialize a list to store the subnets with their network address and subnet mask
    subnet_list = []

    # Loop through each subnet, calculate its network address and subnet mask, and add it to the list
    for subnet_size in subnets:
        subnet_mask = (0xffffffff >> (32 - subnet_size)) << (32 - subnet_size)
        subnet = ipaddress.IPv4Network((network_address, subnet_mask))
        subnet_list.append((subnet.network_address, subnet.netmask))
        network_address += subnet_size

    # Return the list of subnets with their network address and subnet mask
    return subnet_list

# Example usage
subnets = [512, 128, 32]
network_address = ipaddress.IPv4Address('192.168.0.0')
subnet_list = vlsm(subnets, network_address)
for subnet in subnet_list:
    print("Network address: {}, Subnet mask: {}".format(subnet[0], subnet[1]))
